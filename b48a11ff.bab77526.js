(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{108:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=r.a.createContext({}),u=function(e){var t=r.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},d=function(e){var t=u(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},p=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),d=u(n),p=a,m=d["".concat(s,".").concat(p)]||d[p]||b[p]||i;return n?r.a.createElement(m,c(c({ref:t},l),{},{components:n})):r.a.createElement(m,c({ref:t},l))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=p;var c={};for(var o in t)hasOwnProperty.call(t,o)&&(c[o]=t[o]);c.originalType=e,c.mdxType="string"==typeof e?e:a,s[1]=c;for(var l=2;l<i;l++)s[l]=n[l];return r.a.createElement.apply(null,s)}return r.a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},93:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return o})),n.d(t,"default",(function(){return u}));var a=n(3),r=n(7),i=(n(0),n(108)),s={id:"database",title:"Interacting with the database",sidebar_label:"Interacting with the database",slug:"/database"},c={unversionedId:"database",id:"database",isDocsHomePage:!1,title:"Interacting with the database",description:"Eventually you will want to persist data to stay around after you close your browser tab. Every Assemble environment comes with a database that you can use to store data.",source:"@site/docs/database.md",slug:"/database",permalink:"/docs/database",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/database.md",version:"current",sidebar_label:"Interacting with the database",sidebar:"someSidebar",previous:{title:"Environment events",permalink:"/docs/environment_events"},next:{title:"Async callbacks and timouts",permalink:"/docs/async_callbacks"}},o=[{value:"Putting data in",id:"putting-data-in",children:[]},{value:"Getting data out",id:"getting-data-out",children:[]},{value:"Patching data",id:"patching-data",children:[]},{value:"Scanning data",id:"scanning-data",children:[]},{value:"Counters",id:"counters",children:[]},{value:"Putting it all together",id:"putting-it-all-together",children:[]}],l={toc:o};function u(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Eventually you will want to persist data to stay around after you close your browser tab. Every Assemble environment comes with a database that you can use to store data."),Object(i.b)("h2",{id:"putting-data-in"},"Putting data in"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-rust"}),'#[derive(Deserialize, Serialize)]\nstruct MyData {\n    some_param: String,\n    other_param: u32\n}\n\nkv_set(\n    "my-bucket",\n    "my-item-key",\n    &MyData{some_param: "Hello world".into(), other_param: 0}\n)?;\n')),Object(i.b)("h2",{id:"getting-data-out"},"Getting data out"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-rust"}),'let data: Option<MyData> = kv_get("my-bucket", "my-item-key")?;\n')),Object(i.b)("h2",{id:"patching-data"},"Patching data"),Object(i.b)("p",null,"Sometimes you only want to update one field without having to read the whole object, change the field and write the whole object back. Patching objects allow you to do this by creating a struct with only the fields you want to change."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-rust"}),'#[derive(Deserialize, Serialize)]\nstruct MyDataPatch {\n    other_param: u32\n}\n\nkv_patch("my-bucket", "my-item-key", &MyDataPatch{other_param: 0})?;\n')),Object(i.b)("h2",{id:"scanning-data"},"Scanning data"),Object(i.b)("p",null,"When you want to read the objects by the order of the keys, use the scan functionality. This is useful for displaying lists and building indexes."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-rust"}),'let scan_opts = ScanOpts::default().reverse(true).limit(LIMIT);\nlet items = kv_scan::<MyData>("my-bucket", &scan_opts)?;\nfor (key, item) in items {\n    // do something\n}\n')),Object(i.b)("h2",{id:"counters"},"Counters"),Object(i.b)("p",null,"Sometimes you want to simply keep count of things. For this, reading a key, updating it and writing it back out is not desirable. Assemble supplies the counter type to accomodate this."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-rust"}),'counter_increment("my-bucket", "my-counter", 1)?;\nlet current_count = counter_get("my-bucket", "my-counter")?\n')),Object(i.b)("h2",{id:"putting-it-all-together"},"Putting it all together"),Object(i.b)("p",null,"Lets continue building our example from the previous section by storing events in the database after every click and when the View starts, scanning the database and loading the most recent ones."),Object(i.b)("p",null,Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://www.assemble.app/environment/8bd8ffc6-85cd-4466-8320-5cd56d94b1aa/quick_view/"}),"Quick view")," for details and to fork. "),Object(i.b)("iframe",{height:"400",width:"100%",src:"https://www.assemble.app/environment/8bd8ffc6-85cd-4466-8320-5cd56d94b1aa/view/?iframe=true",title:"Database"}),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-rust"}),'extern crate assemble_app;\nextern crate serde;\nextern crate maud;\nuse assemble_app::*;\nuse maud::html;\nuse serde::{Deserialize, Serialize};\nuse std::collections::{HashMap, VecDeque};\n\nassemble_init! {{\n    register_root_view!(ViewHandler);\n}}\n\n#[derive(Deserialize, Serialize)]\nstruct MyEvent {\n    description: String,\n    face: String,\n}\n\n#[derive(Deserialize, Serialize)]\nstruct ViewHandler {\n  recent_events: VecDeque<MyEvent>\n}\n\nconst LIMIT: u32 = 10;\n\nimpl View for ViewHandler {\n  fn start(_is_connected: bool, _params: HashMap<String, String>) -> Result<Self> {\n    pubsub_subscribe("events")?;\n\n    let mut vd = VecDeque::new();\n\n    let events = kv_scan::<MyEvent>("event_bucket", &ScanOpts::default().reverse(true).limit(LIMIT))?;\n    for (_, event) in events {\n        vd.push_front(event);\n    }\n    Ok(ViewHandler { recent_events: vd })\n  }\n\n  fn render(&self) -> Result<Html> {\n    let markup = html! {\n        div class="bg-indigo-700" {\n          div class="max-w-2xl mx-auto text-center py-16 px-4 sm:py-20 sm:px-6 lg:px-8" {\n            button assemble-click="click" assemble-value-description="Panda"  assemble-value-face="\ud83d\udc3c" class="mt-8 w-full inline-flex items-center justify-center px-5 py-3 border border-transparent text-base font-medium rounded-md text-indigo-600 bg-white hover:bg-indigo-50 sm:w-auto" {\n              "Pick panda (\ud83d\udc3c)"\n            }\n            button assemble-click="click" assemble-value-description="Gorilla"  assemble-value-face="\ud83e\udd8d" class="mx-4 mt-8 w-full inline-flex items-center justify-center px-5 py-3 border border-transparent text-base font-medium rounded-md text-indigo-600 bg-white hover:bg-indigo-50 sm:w-auto" {\n              "Pick gorilla (\ud83e\udd8d)"\n            }\n            button assemble-click="click" assemble-value-description="Tiger"  assemble-value-face="\ud83d\udc2f" class="mt-8 w-full inline-flex items-center justify-center px-5 py-3 border border-transparent text-base font-medium rounded-md text-indigo-600 bg-white hover:bg-indigo-50 sm:w-auto" {\n              "Pick tiger (\ud83d\udc2f)"\n            }\n            h2 class="mt-4 text-3xl font-extrabold text-white sm:text-4xl" {\n              span class="block" {\n                "Last 100 Events"\n              }\n            }\n            @for (event) in &self.recent_events {\n              p class="mt-4 text-lg leading-6 text-indigo-200" {\n                "Somebody picked a " (event.description) " " (event.face)\n              }\n            }\n          }\n\n        }\n    };\n    Ok(markup.into_string())\n  }\n\n  fn local_event(&mut self, msg: &str, payload: &[u8]) -> Result<()> {\n    match msg {\n      "click" => {\n        let ev: MyEvent = deserialize(payload)?;\n        kv_set("event_bucket", &utc_now()?.to_rfc3339(), &ev)?;\n        pubsub_publish_from("events", "new_event", &ev)?;\n        self.recent_events.push_front(ev);\n        self.recent_events.truncate(LIMIT as usize);\n        \n        Ok(())\n      }\n      _ => Ok(())\n    }\n  }\n\n  fn pubsub_event(&mut self, topic: &str, event: &str, payload: &[u8]) -> Result<()> {\n    match &(topic, event) {\n      ("events", "new_event") => {\n        self.recent_events.push_front(deserialize(payload)?);\n        self.recent_events.truncate(LIMIT as usize);\n        Ok(())\n      }\n      _ => Ok(())\n    }\n  }\n}\n')))}u.isMDXComponent=!0}}]);