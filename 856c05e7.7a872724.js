(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{108:function(e,n,t){"use strict";t.d(n,"a",(function(){return u})),t.d(n,"b",(function(){return f}));var r=t(0),s=t.n(r);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,s=function(e,n){if(null==e)return{};var t,r,s={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var l=s.a.createContext({}),p=function(e){var n=s.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},u=function(e){var n=p(e.components);return s.a.createElement(l.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return s.a.createElement(s.a.Fragment,{},n)}},d=s.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),u=p(t),d=r,f=u["".concat(i,".").concat(d)]||u[d]||m[d]||a;return t?s.a.createElement(f,c(c({ref:n},l),{},{components:t})):s.a.createElement(f,c({ref:n},l))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=d;var c={};for(var o in n)hasOwnProperty.call(n,o)&&(c[o]=n[o]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var l=2;l<a;l++)i[l]=t[l];return s.a.createElement.apply(null,i)}return s.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},84:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return c})),t.d(n,"toc",(function(){return o})),t.d(n,"default",(function(){return p}));var r=t(3),s=t(7),a=(t(0),t(108)),i={id:"presence",title:"Presence"},c={unversionedId:"presence",id:"presence",isDocsHomePage:!1,title:"Presence",description:'A companion to events is the Presence feature. Presence allows you track "Whos online". Once your view is tracked by a presence, you will remain in the presence list until the view closes.',source:"@site/docs/presence.md",slug:"/presence",permalink:"/docs/presence",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/presence.md",version:"current",sidebar:"someSidebar",previous:{title:"Async callbacks and timouts",permalink:"/docs/async_callbacks"},next:{title:"Dashboards by embeding views",permalink:"/docs/dashboards"}},o=[{value:"Putting it all together",id:"putting-it-all-together",children:[]}],l={toc:o};function p(e){var n=e.components,t=Object(s.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("p",null,'A companion to events is the Presence feature. Presence allows you track "Whos online". Once your view is tracked by a presence, you will remain in the presence list until the view closes.'),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-rust"}),'#[derive(Deserialize, Serialize)]\nstruct MyPresenceMetaData {\n    something: u32\n}\n\nlet meta = MyPresenceMetaData{something: 1};\npresence_track("my-presence-topic", "my-user-key", &meta)?;\n')),Object(a.b)("p",null,"In order to subscribe to changes of a presence, you need to use ",Object(a.b)("inlineCode",{parentName:"p"},"presence_subscribe")," this is best done in the start method. Everytime someone joins or leaves, ",Object(a.b)("inlineCode",{parentName:"p"},"presnce_event")," will be called."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-rust"}),'\nimpl View for ViewHandler {\n  fn start(is_connected: bool, _params: HashMap<String, String>) -> Result<Self> {\n    presence_subscribe("my-presence-topic")?;\n    // ..\n  }\n\n  // ..\n\n  fn presence_event(&mut self, topic: &str, diff: PresenceDiffRaw) -> Result<()> {\n      match topic {\n        "my-presence-topic" => {\n          let ev: PresenceDiff<MyPresenceMetaData> = presence_deserialize_diff(diff)?;\n        \n          // Do something\n\n          Ok(())\n        }\n        _ => Ok(())\n      }\n  }\n}\n\n')),Object(a.b)("h2",{id:"putting-it-all-together"},"Putting it all together"),Object(a.b)("p",null,"Below the app will keep a list of who is online. As other tabs open the environment, the list of online users will automatically update."),Object(a.b)("p",null,"Open in ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"https://www.assemble.app/environment/fcdc6e45-4e7b-4ac3-8d5e-07e8eaf31c49/view/"}),"multiple tabs")," to see users enter and leave. "),Object(a.b)("p",null,Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"https://www.assemble.app/environment/fcdc6e45-4e7b-4ac3-8d5e-07e8eaf31c49/quick_view/"}),"Quick view")," for details and to fork. "),Object(a.b)("iframe",{height:"400",width:"100%",src:"https://www.assemble.app/environment/fcdc6e45-4e7b-4ac3-8d5e-07e8eaf31c49/view/?iframe=true",title:"Presence"}),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-rust"}),'extern crate assemble_app;\nextern crate serde;\nextern crate maud;\nuse assemble_app::*;\nuse maud::html;\nuse serde::{Deserialize, Serialize};\nuse std::collections::{HashMap, HashSet};\n\nassemble_init! {{\n    register_root_view!(ViewHandler);\n}}\n\n\n#[derive(Deserialize, Serialize)]\nstruct MyPresenceMetaData {\n    something: String\n}\n\n#[derive(Deserialize, Serialize)]\nstruct ViewHandler {\n    your_id: String,\n    connected_users: HashSet<String>\n}\n\nimpl View for ViewHandler {\n  fn start(is_connected: bool, _params: HashMap<String, String>) -> Result<Self> {\n    let meta = MyPresenceMetaData{something: random_string(10)?};\n    presence_track("my-presence-topic", &format!("user-{}", meta.something), &meta)?;\n    presence_subscribe("my-presence-topic")?;\n    let initial_users = presence_list::<MyPresenceMetaData>("my-presence-topic")?;\n    let mut hs = HashSet::new();\n    \n    for (k, _) in initial_users {\n        hs.insert(k);\n    }\n    \n    Ok(ViewHandler {your_id: meta.something, connected_users: hs})\n  }\n\n  fn render(&self) -> Result<Html> {\n    let markup = html! {\n        div class="bg-indigo-700" {\n          div class="mx-auto text-center py-16 px-8" {\n            h2 class="mt-4 text-3xl font-extrabold text-white" {\n              "You are: " (self.your_id)\n            }\n            h2 class="mt-4 text-3xl font-extrabold text-white" {\n              "Connected users"\n            }\n            @for (user) in &self.connected_users {\n              p class="mt-4 text-lg leading-6 text-indigo-200" {\n                (user)\n              }\n            }\n          }\n\n        }\n    };\n    Ok(markup.into_string())\n  }\n\n  fn presence_event(&mut self, topic: &str, diff: PresenceDiffRaw) -> Result<()> {\n      match topic {\n        "my-presence-topic" => {\n          let ev: PresenceDiff<MyPresenceMetaData> = presence_deserialize_diff(diff)?;\n        \n          for (user, _meta) in ev.joins {\n            self.connected_users.insert(user);\n          }\n          for (user, meta) in ev.leaves {\n            self.connected_users.remove(&user);\n          }\n\n          Ok(())\n        }\n        _ => Ok(())\n      }\n  }\n}\n')))}p.isMDXComponent=!0}}]);