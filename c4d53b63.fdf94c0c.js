(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{108:function(e,n,r){"use strict";r.d(n,"a",(function(){return d})),r.d(n,"b",(function(){return m}));var t=r(0),a=r.n(t);function i(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function s(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){i(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function c(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},i=Object.keys(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=a.a.createContext({}),p=function(e){var n=a.a.useContext(l),r=n;return e&&(r="function"==typeof e?e(n):s(s({},n),e)),r},d=function(e){var n=p(e.components);return a.a.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},b=a.a.forwardRef((function(e,n){var r=e.components,t=e.mdxType,i=e.originalType,o=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),d=p(r),b=t,m=d["".concat(o,".").concat(b)]||d[b]||u[b]||i;return r?a.a.createElement(m,s(s({ref:n},l),{},{components:r})):a.a.createElement(m,s({ref:n},l))}));function m(e,n){var r=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var i=r.length,o=new Array(i);o[0]=b;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:t,o[1]=s;for(var l=2;l<i;l++)o[l]=r[l];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,r)}b.displayName="MDXCreateElement"},95:function(e,n,r){"use strict";r.r(n),r.d(n,"frontMatter",(function(){return o})),r.d(n,"metadata",(function(){return s})),r.d(n,"toc",(function(){return c})),r.d(n,"default",(function(){return p}));var t=r(3),a=r(7),i=(r(0),r(108)),o={id:"dashboards",title:"Dashboards by embeding views"},s={unversionedId:"dashboards",id:"dashboards",isDocsHomePage:!1,title:"Dashboards by embeding views",description:"Combining views into one is as simple as embedding an iframe.",source:"@site/docs/dashboards.md",slug:"/dashboards",permalink:"/docs/dashboards",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/dashboards.md",version:"current",sidebar:"someSidebar",previous:{title:"Presence",permalink:"/docs/presence"},next:{title:"Infinte DOM with finite state",permalink:"/docs/infinite_dom"}},c=[],l={toc:c};function p(e){var n=e.components,r=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(t.a)({},l,r,{components:n,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Combining views into one is as simple as embedding an iframe."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"https://www.assemble.app/environment/[Your Environment Id]/view/?iframe=true")),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"?iframe=true")," prevents the standard header from appearing."),Object(i.b)("p",null,Object(i.b)("a",Object(t.a)({parentName:"p"},{href:"https://www.assemble.app/environment/501651cc-0f12-4272-80a9-9d3d92faa3de/quick_view/"}),"Quick view")," for details and to fork. "),Object(i.b)("iframe",{width:"100%",height:"200px",src:"https://www.assemble.app/environment/501651cc-0f12-4272-80a9-9d3d92faa3de/view/?iframe=true"}),Object(i.b)("pre",null,Object(i.b)("code",Object(t.a)({parentName:"pre"},{className:"language-rust"}),'extern crate assemble_app;\nextern crate serde;\nextern crate maud;\nuse assemble_app::*;\nuse maud::html;\nuse serde::{Deserialize, Serialize};\nuse std::collections::{HashMap};\n\nassemble_init! {{\n    register_root_view!(ViewHandler);\n}}\n\n\n#[derive(Deserialize, Serialize)]\nstruct ViewHandler {\n}\n\nimpl View for ViewHandler {\n  fn start(_is_connected: bool, _params: HashMap<String, String>) -> Result<Self> {\n    Ok(ViewHandler {})\n  }\n\n  fn render(&self) -> Result<Html> {\n    let markup = html! {\n        div class="bg-indigo-700" {\n          div class="grid grid-cols-3 gap-4" {\n            iframe class="w-full h-96" src="/environment/ce0bab0a-56cc-4640-83b3-ee91401b4f5f/view/?iframe=true" {\n                \n            }\n            iframe class="w-full h-96 col-span-2" src="/environment/b76dcec8-1052-44a0-9691-460b74587c9f/view/?iframe=true" {\n                \n            }\n          }\n\n        }\n    };\n    Ok(markup.into_string())\n  }\n}\n')))}p.isMDXComponent=!0}}]);