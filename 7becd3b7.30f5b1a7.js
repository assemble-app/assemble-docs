(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{108:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return d}));var r=t(0),i=t.n(r);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=i.a.createContext({}),u=function(e){var n=i.a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=u(e.components);return i.a.createElement(c.Provider,{value:n},e.children)},b={inlineCode:"code",wrapper:function(e){var n=e.children;return i.a.createElement(i.a.Fragment,{},n)}},m=i.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(t),m=r,d=p["".concat(s,".").concat(m)]||p[m]||b[m]||a;return t?i.a.createElement(d,o(o({ref:n},c),{},{components:t})):i.a.createElement(d,o({ref:n},c))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,s=new Array(a);s[0]=m;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var c=2;c<a;c++)s[c]=t[c];return i.a.createElement.apply(null,s)}return i.a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},83:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return s})),t.d(n,"metadata",(function(){return o})),t.d(n,"toc",(function(){return l})),t.d(n,"default",(function(){return u}));var r=t(3),i=t(7),a=(t(0),t(108)),s={id:"environment_events",title:"Environment events",sidebar_label:"Environment events"},o={unversionedId:"environment_events",id:"environment_events",isDocsHomePage:!1,title:"Environment events",description:"Assemble is a platform of events. Your view should be built to respond to those events. Events are consumed by subscribing to topics. this is normally best performed in the start function of your View",source:"@site/docs/environment_events.md",slug:"/environment_events",permalink:"/docs/environment_events",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/environment_events.md",version:"current",sidebar_label:"Environment events",sidebar:"someSidebar",previous:{title:"DOM events and state",permalink:"/docs/dom_events"},next:{title:"Interacting with the database",permalink:"/docs/database"}},l=[{value:"Putting it all together",id:"putting-it-all-together",children:[]}],c={toc:l};function u(e){var n=e.components,t=Object(i.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},c,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("p",null,"Assemble is a platform of events. Your view should be built to respond to those events. Events are consumed by subscribing to topics. this is normally best performed in the ",Object(a.b)("inlineCode",{parentName:"p"},"start")," function of your ",Object(a.b)("inlineCode",{parentName:"p"},"View")),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-rust"}),'impl View for ViewHandler {\n    fn start(_params: HashMap<String, String>) -> Result<Self> {\n      pubsub_subscribe("my-awesome-topic")?;\n\n      Ok(ViewHandler { })\n    }\n    // ..\n}\n\n')),Object(a.b)("p",null,"To publish events, use the ",Object(a.b)("inlineCode",{parentName:"p"},"pubsub_publish")," and ",Object(a.b)("inlineCode",{parentName:"p"},"pubsub_publish_from")," functions. Be aware that using ",Object(a.b)("inlineCode",{parentName:"p"},"pubsub_publish")," your view will receive the same event that you published. In order to prevent this it is recommended to just always use ",Object(a.b)("inlineCode",{parentName:"p"},"pubsub_publish_from")," which will prevent this from happening."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-rust"}),'#[derive(Deserialize, Serialize)]\nstruct MyEnvEvent {\n    my_param: String,\n}\n\n// ..\n\npubsub_publish_from(\n    "my-awesome-topic",\n    "my-event",\n    &MyEnvEvent{my_param: "Hello world"}\n)?;\n')),Object(a.b)("p",null,"Events from the topic will be streamed into your view's ",Object(a.b)("inlineCode",{parentName:"p"},"pubsub_event")," method."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-rust"}),'impl View for ViewHandler {\n    // ..\n\n    fn pubsub_event(&mut self, topic: &str, event: &str, payload: &[u8]) -> Result<()> {\n        match topic {\n            "my-awesome-topic" => {\n                match event {\n                    "my-event" => {\n                        let ev: MyEnvEvent = deserialize(payload)?;\n                        // Do something\n                        Ok(())\n                    }\n                    _ => Ok(())\n                }\n            }\n            _ => Ok(())\n        }\n        // ..\n    }\n    // ..\n}\n')),Object(a.b)("h3",{id:"putting-it-all-together"},"Putting it all together"),Object(a.b)("p",null,"Combining local DOM events with PubSub events lets you build collaborative allications easily. This example uses a double-ended queue to keep a list of the latest 10 events in the environment."),Object(a.b)("p",null,Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"https://www.assemble.app/environment/d7f7bd7a-1a82-40d3-ac0a-5a6630966d40/quick_view/"}),"Quick view")," for details and to fork. "),Object(a.b)("iframe",{height:"400",width:"100%",src:"https://www.assemble.app/environment/d7f7bd7a-1a82-40d3-ac0a-5a6630966d40/view/?iframe=true",title:"Environment Events"}),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-rust"}),'extern crate assemble_app;\nextern crate serde;\nextern crate maud;\nuse assemble_app::*;\nuse maud::html;\nuse serde::{Deserialize, Serialize};\nuse std::collections::{HashMap, VecDeque};\n\nassemble_init! {{\n    register_root_view!(ViewHandler);\n}}\n\n#[derive(Deserialize, Serialize)]\nstruct MyEvent {\n    description: String,\n    face: String,\n}\n\n#[derive(Deserialize, Serialize)]\nstruct ViewHandler {\n  recent_events: VecDeque<MyEvent>\n}\n\nconst LIMIT: u32 = 10;\n\nimpl View for ViewHandler {\n  fn start(_is_connected: bool, _params: HashMap<String, String>) -> Result<Self> {\n    pubsub_subscribe("events")?;\n\n    let mut vd = VecDeque::new();\n\n    Ok(ViewHandler { recent_events: vd })\n  }\n\n  fn render(&self) -> Result<Html> {\n    let markup = html! {\n        div class="bg-indigo-700" {\n          div class="max-w-2xl mx-auto text-center py-16 px-4 sm:py-20 sm:px-6 lg:px-8" {\n            button assemble-click="click" assemble-value-description="Panda"  assemble-value-face="\ud83d\udc3c" class="mt-8 w-full inline-flex items-center justify-center px-5 py-3 border border-transparent text-base font-medium rounded-md text-indigo-600 bg-white hover:bg-indigo-50 sm:w-auto" {\n              "Pick panda (\ud83d\udc3c)"\n            }\n            button assemble-click="click" assemble-value-description="Gorilla"  assemble-value-face="\ud83e\udd8d" class="mx-4 mt-8 w-full inline-flex items-center justify-center px-5 py-3 border border-transparent text-base font-medium rounded-md text-indigo-600 bg-white hover:bg-indigo-50 sm:w-auto" {\n              "Pick gorilla (\ud83e\udd8d)"\n            }\n            button assemble-click="click" assemble-value-description="Tiger"  assemble-value-face="\ud83d\udc2f" class="mt-8 w-full inline-flex items-center justify-center px-5 py-3 border border-transparent text-base font-medium rounded-md text-indigo-600 bg-white hover:bg-indigo-50 sm:w-auto" {\n              "Pick tiger (\ud83d\udc2f)"\n            }\n            h2 class="mt-4 text-3xl font-extrabold text-white sm:text-4xl" {\n              span class="block" {\n                "Last 100 Events"\n              }\n            }\n            @for (event) in &self.recent_events {\n              p class="mt-4 text-lg leading-6 text-indigo-200" {\n                "Somebody picked a " (event.description) " " (event.face)\n              }\n            }\n          }\n\n        }\n    };\n    Ok(markup.into_string())\n  }\n\n  fn local_event(&mut self, msg: &str, payload: &[u8]) -> Result<()> {\n    match msg {\n      "click" => {\n        let ev: MyEvent = deserialize(payload)?;\n        pubsub_publish_from("events", "new_event", &ev)?;\n        self.recent_events.push_front(ev);\n        self.recent_events.truncate(LIMIT as usize);\n        \n        Ok(())\n      }\n      _ => Ok(())\n    }\n  }\n\n  fn pubsub_event(&mut self, topic: &str, event: &str, payload: &[u8]) -> Result<()> {\n    match &(topic, event) {\n      ("events", "new_event") => {\n        self.recent_events.push_front(deserialize(payload)?);\n        self.recent_events.truncate(LIMIT as usize);\n        Ok(())\n      }\n      _ => Ok(())\n    }\n  }\n}\n\n')))}u.isMDXComponent=!0}}]);